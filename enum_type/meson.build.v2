
rootdir = '..'
currentdir = '.'
rootinc = join_paths(rootdir, 'include/')
currentinc = join_paths(currentdir, 'include/')
enum_type_inc = include_directories(currentinc)
enum_type_main = ['src/main.cpp']
# enum_type_simple = ['src/user_simple.cpp']
enum_type_src = [
    'src/lib.cpp',
]

enum_type_exe = executable(
    'enum_type_opt',
    [enum_type_main, enum_type_src],
    include_directories: [enum_type_inc, common_inc],
    dependencies: [bench, thread],
    install: true,
    objects: [common_inc_opt_o],
)

enum_type_exe_no_opt = executable(
    'enum_type_no_opt',
    [enum_type_main, enum_type_src],
    include_directories: [enum_type_inc, common_inc],
    dependencies: [bench, thread],
    install: true,
    cpp_args: ['-O0', '-g'],
    objects: [common_inc_opt_o],
)

enum_type_inc_opt_o = enum_type_exe.extract_objects(
    enum_type_src,
)

enum_type_main_opt_o = enum_type_exe.extract_objects(
    enum_type_main,
)

enum_type_inc_o = enum_type_inc_opt_o

enum_type_inc_no_opt_o = enum_type_exe_no_opt.extract_objects(
    enum_type_src,
)

enum_type_main_no_opt_o = enum_type_exe_no_opt.extract_objects(
    enum_type_main,
)

asandep = cpp.find_library('asan', dirs: '/usr/lib/x86_64-linux-gnu')

enum_type_exe_sanitize = executable(
    'enum_type_opt_sanitize',
    include_directories: [enum_type_inc, common_inc],
    install: true,
    cpp_args: ['-O3', '-fsanitize=address'],
    dependencies: [asandep, bench, thread],
    link_args: ['-Wl,--start-group', '-lasan', '-Wl,--end-group'],
    objects: [enum_type_main_opt_o, enum_type_inc_opt_o, common_inc_opt_o],
)

enum_type_exe_no_opt_sanitize = executable(
    'enum_type_no_opt_sanitize',
    include_directories: [enum_type_inc, common_inc],
    install: true,
    cpp_args: ['-O0', '-g', '-fsanitize=address'],
    dependencies: [asandep, bench, thread],
    link_args: ['-Wl,--start-group', '-lasan', '-Wl,--end-group'],
    objects: [enum_type_main_no_opt_o, enum_type_inc_no_opt_o, common_inc_opt_o],
)

if bench.found()
    enum_type_benchmark_test = ['bench.cpp']

    enum_type_benchmark_google_opt_exe = executable(
        'enum_type_benchmark_google_opt',
        [enum_type_benchmark_test],
        objects: [enum_type_inc_opt_o, common_inc_opt_o],
        include_directories: [enum_type_inc, common_inc],
        dependencies: [bench, thread],
    )

    benchmark(
        'enum_type_benchmark_google_opt',
        enum_type_benchmark_google_opt_exe,
        suite: 'enum_type',
        timeout: 0,
    )

    enum_type_benchmark_google_no_opt_exe = executable(
        'enum_type_benchmark_google_no_opt',
        [enum_type_benchmark_test],
        objects: [enum_type_inc_no_opt_o, common_inc_opt_o],
        include_directories: [enum_type_inc, common_inc],
        dependencies: [bench, thread],
        cpp_args: ['-O0', '-g'],
    )

    benchmark(
        'enum_type_benchmark_google_no_opt',
        enum_type_benchmark_google_no_opt_exe,
        suite: 'enum_type',
        timeout: 0,
    )

    custom_target(
        'bench_enum_type',
        command: [
            'sh',
            '-c', 'meson test --benchmark -C @BUILD_ROOT@ --suite enum_type && cat @BUILD_ROOT@/meson-logs/testlog.txt',
        ],
        depends: [
            enum_type_benchmark_google_no_opt_exe,
            enum_type_benchmark_google_opt_exe,
        ],
        output: 'dummy_output.txt',
    )
endif

gen_asm = custom_target(
    'gen_asm_no_opt',
    input: enum_type_main,
    output: 'enum_type_main_no_opt.s',
    command: [
        cpp_prog,
        '-I' + meson.current_source_dir() + '/include/',
        '-I' + meson.current_source_dir() + '/../',
        '-S',
        '-masm=intel',
        '-o', '@OUTPUT@',
        '@INPUT@',
    ],
    build_by_default: true,
)

gen_asm_opt = custom_target(
    'gen_asm_opt',
    input: enum_type_main,
    output: 'enum_type_main_opt.s',
    command: [
        cpp_prog,
        '-O3', '-I' + meson.current_source_dir() + '/include/',
        '-I' + meson.current_source_dir() + '/../',
        '-S',
        '-masm=intel',
        '-o', '@OUTPUT@',
        '@INPUT@',
    ],
    build_by_default: true,
)

gen_asm_lib = custom_target(
    'gen_asm_lib_no_opt',
    input: enum_type_src,
    output: 'enum_type_lib_no_opt.s',
    command: [
        cpp_prog,
        '-I' + meson.current_source_dir() + '/include/',
        '-I' + meson.current_source_dir() + '/../',
        '-S',
        '-masm=intel',
        '-o', '@OUTPUT@',
        '@INPUT@',
    ],
    build_by_default: true,
)

gen_asm_lib_opt = custom_target(
    'gen_asm_lib_opt',
    input: enum_type_src,
    output: 'enum_type_lib_opt.s',
    command: [
        cpp_prog,
        '-O3', '-I' + meson.current_source_dir() + '/include/',
        '-I' + meson.current_source_dir() + '/../',
        '-S',
        '-masm=intel',
        '-o', '@OUTPUT@',
        '@INPUT@',
    ],
    build_by_default: true,
)
